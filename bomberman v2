//Trabalho feito para a disciplina de Algoritimos e programaçao 2
//Disciplina ministrada pelo professor Thiago Pereira
//Autores do trabalho: Matheus Testoni, Sebastian Motta e William Campos
//Trabalho referente ao jogo bomberman

#include <cstdlib>
#include <iostream>
#include <time.h>
#include <windows.h>
#include <conio.h>
#include <fstream>
#include <iomanip>

using namespace std;

#define T 21
#define I 3

void clean(){
    HANDLE out = GetStdHandle(STD_OUTPUT_HANDLE);
    CONSOLE_CURSOR_INFO     cursorInfo;
    GetConsoleCursorInfo(out, &cursorInfo);
    cursorInfo.bVisible = false; // set the cursor visibility
    SetConsoleCursorInfo(out, &cursorInfo);
    //FIM: COMANDOS PARA QUE O CURSOR N�O FIQUE PISCANDO NA TELA
    //IN�CIO: COMANDOS PARA REPOSICIONAR O CURSOR NO IN�CIO DA TELA
    short int CX=0, CY=0;
    COORD coord;
    coord.X = CX;
    coord.Y = CY;
    //FIM: COMANDOS PARA REPOSICIONAR O CURSOR NO IN�CIO DA TELA
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}

bool carregarMapa(int numeroMapa, int ix[I], int iy[I], int matrizBase[T][T]){
    ifstream loadmap;
    string nomeArquivo = "map"+to_string(numeroMapa)+".txt";

    loadmap.open(nomeArquivo, ios::in);

    if(loadmap.is_open()){ // le onde os inimigos nascem
        for (int i=0; i<I; i++){
            loadmap>>ix[i]>>iy[i];
        }

        for(int l=0; l<T; l++){ // le a matriz do mapa e transfere ela pra matriz base
            for(int c=0; c<T; c++){
                loadmap>>matrizBase[l][c];
            }
        }

        loadmap.close();
        return true;
    } else {
        cout<<"Nao foi possivel abrir o arquivo!\n"; //  caso n exista o arquivo do mapa
        return false;
    }
}

void copiarMatriz(int matrizDestino[T][T], int matrizOrigem[T][T]){
    for(int l=0; l<T; l++){
        for(int c=0; c<T; c++){
            matrizDestino[l][c] = matrizOrigem[l][c]; // copia uma matriz para a outra
        }
    }
}

int matrizBase[T][T]={0}; // cria a matriz base

void definirCor(int cor) {
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), cor); // cor da letra
}

void imprimirMatriz(int matriz[T][T], int x, int y){ // imprime a matriz
    for(int l=0; l<T; l++){
        for(int c=0; c<T; c++){
            switch(matriz[l][c]){
                case 0: // 0 espaco livre
                    cout<<" ";
                    break;
                case 1: // 1 parede (ciano)
                    definirCor(8);
                    cout<<char(219);
                    break;
                case 2: // 2 boneco (ciano)
                    definirCor(15);
                    cout<<char(1);
                    break;
                case 3: // 3 inimigo (vermelho)
                    definirCor(4);
                    cout<<char(2);
                    break;
                case 4: // 4 bomba (amarela)
                    definirCor(14);
                    cout<<char(219);
                    break;
                case 5: // 5 parede quebravel (azul)
                    definirCor(3);
                    cout<<char(176);
                    break;
            }
        }
        cout<<"\n";
    }
}

bool gerada = false;

void paredesQuebraveis(int matrizBase[T][T], int matrizQuebraveis[T][T]){ // NESSE TRABALHO N USEI ESSA FUNCAO DE CRIAR PAREDES QUEBRAVEIS
    int paredesQuebraveisGeradas = 0;

    if(!gerada){
        gerada = true;

        while (paredesQuebraveisGeradas < 30) {
            int l = rand() % (T - 2) + 1; // Gerar uma posição de linha aleatória (evitando bordas)
            int c = rand() % (T - 2) + 1; // Gerar uma posição de coluna aleatória (evitando bordas)

            if((matrizBase[l][c] == 0) &&
               (l != 1 || c != 1) &&
               (l != 13 || c != 13) &&
               (l != 13 || c != 1) &&
               (l != 1 || c != 13) &&
               (l != 1 || c != 2) &&
               (l != 2 || c != 1) &&
               (l != 13 || c != 12) &&
               (l != 1 || c != 12) &&
               (l != 13 || c != 2)){
                matrizQuebraveis[l][c] = 5;
                paredesQuebraveisGeradas++;
            }
        }
    }
}

bool bombaMatandoPlayerInimigo(int matriz[T][T], int x, int y, int bombx, int bomby){ //função para se o player estiver no raio da bomba matar ele
    if((matriz[y][x] == matriz[bomby-1][bombx]) ||
       (matriz[y][x] == matriz[bomby+1][bombx]) ||
       (matriz[y][x] == matriz[bomby][bombx+1]) ||
       (matriz[y][x] == matriz[bomby][bombx-1]) ||
       (matriz[y][x] == matriz[bomby][bombx])){
        return true;
        }
    return false;
}

void bombaExplosao(int matriz[T][T], int matrizQuebraveis[T][T], int &x, int &y, int ix[I], int iy[I], int bombx, int bomby, int bombaTimer){ //Função utilizida para gerar a explosão da bomba a partir do timer
    if(bombaTimer == 1){
        if(matriz[bomby-1][bombx]==0 || matriz[bomby-1][bombx]==5 || matriz[bomby-1][bombx]==3 || matriz[bomby-1][bombx]==2){
            matriz[bomby-1][bombx]=4;
            if(matrizBase[bomby-1][bombx]==5){
                matrizBase[bomby-1][bombx]=0;
            }
        }
        if(matriz[bomby+1][bombx]==0 || matriz[bomby+1][bombx]==5 || matriz[bomby+1][bombx]==3 || matriz[bomby+1][bombx]==2){
            matriz[bomby+1][bombx]=4;
            if(matrizBase[bomby+1][bombx]==5){
                matrizBase[bomby+1][bombx]=0;
            }
        }
        if(matriz[bomby][bombx-1]==0 || matriz[bomby][bombx-1]==5 || matriz[bomby][bombx-1]==3 || matriz[bomby][bombx-1]==2){
            matriz[bomby][bombx-1]=4;
            if(matrizBase[bomby][bombx-1]==5){
                matrizBase[bomby][bombx-1]=0;
            }
        }
        if(matriz[bomby][bombx+1]==0 || matriz[bomby][bombx+1]==5 || matriz[bomby][bombx+1]==3 || matriz[bomby][bombx+1]==2){
            matriz[bomby][bombx+1]=4;
            if(matrizBase[bomby][bombx+1]==5){
                matrizBase[bomby][bombx+1]=0;
            }
        }
    }
}

void atualizarMatriz(int matriz[T][T], int matrizQuebraveis[T][T], int &x, int &y, int ix[I], int iy[I], int bombx, int bomby, int bombaTimer, int (&im)[I]){
    copiarMatriz(matriz, matrizBase);

    matriz[bomby][bombx]=4;

    matriz[y][x]=2; // seleciona que cor sera o jogador

    for(int i=0; i<I; i++){
        if(im[i] == 1){ // confere se o inimigo esta morto e n imprime ele
            matriz[iy[i]][ix[i]] = 0;
            iy[i]=15;
            ix[i]=15;
        }
        else if(im[i] == 0){
            matriz[iy[i]][ix[i]] = 3;
        }
    } // cria 3 inimigos

    //for(int l=0; l<T; l++){
    //    for(int c=0; c<T; c++){
    //        if(matrizQuebraveis[l][c] == 5)
    //            matriz[l][c] = 5;
    //    }
    //}

    bombaExplosao(matriz, matrizQuebraveis, x, y, ix, iy, bombx, bomby, bombaTimer);

}

void animarJogador(int matriz[T][T], int &x, int &y, int &bombx, int &bomby, int &bombaTimer, int tecla){
    switch(tecla){
        case 72: // key "W" (up)
            if(matriz[y-1][x]==0 || matriz[y-1][x]==4 || matriz[y-1][x]==3){
                y--;
            }
            break;
        case 80: // key "S" (down)
            if(matriz[y+1][x]==0 || matriz[y+1][x]==4 || matriz[y+1][x]==3){
                y++;
            }
            break;
        case 75: // key "A" (left)
            if(matriz[y][x-1]==0 || matriz[y][x-1]==4 || matriz[y][x-1]==3){
                x--;
            }
            break;
        case 77: // key "D" (right)
            if(matriz[y][x+1]==0 || matriz[y][x+1]==4 || matriz[y][x+1]==3){
                x++;
            }
            break;
        case 32: // Tecla de espaço
            if(bombaTimer == 0){
                bombx=x;
                bomby=y;
                bombaTimer=5;
            }
            break;
    }
}

void animarInimigos(int matriz[T][T], int &x, int &y, int tecla, int &i, int bombaTimer){//movimentação inimigos
    switch(tecla){
        case 1: // key "W" (up)
            if(matriz[y-1][x]==0 || matriz[y-1][x]==2 || matriz[y-1][x]==3){
                y--;
                i++;
            }
            break;
        case 2: // key "S" (down)
            if(matriz[y+1][x]==0 || matriz[y+1][x]==2 || matriz[y+1][x]==3){
                y++;
                i++;
            }
            break;
        case 3: // key "A" (left)
            if(matriz[y][x-1]==0 || matriz[y][x-1]==2 || matriz[y][x-1]==3){
                x--;
                i++;
            }
            break;
        case 4: // key "D" (right)
            if(matriz[y][x+1]==0 || matriz[y][x+1]==2 || matriz[y][x+1]==3){
                x++;
                i++;
            }
            break;
    }
}

bool colisaoJogadorInimigo(int x, int y, int ix[I], int iy[I]) {//Função para se houver uma colisao entre o player eo inimigo o jogador perder
    for(int i=0; i<I; i++) {
        if(x == ix[i] && y == iy[i]) {
            return true; // Colisão detectada
        }
    }
    return false; // Não há colisões
}

void animacao(int matriz[T][T], int matrizQuebraveis[T][T], int &x, int &y, int ix[I], int iy[I], int &bombx, int &bomby, int &bombaTimer, int (&im)[I], int &tempojogo, int &contbomba){
    srand(time(NULL));

    int t = 0; // variavel pra controlar o tempo sem baguncar o ti

    clock_t inicio, fim, tempo, ti = 0;// Essas variáveis ​​são usadas para medir o tempo de execução do programa
    inicio = clock();

    while(true){
        fim = clock();
        tempo = (fim-inicio)/CLOCKS_PER_SEC;

        atualizarMatriz(matriz, matrizQuebraveis, x, y, ix, iy, bombx, bomby, bombaTimer, im); // atualiza a matriz
        clean();

        t = ti + tempojogo; // soma o ti q começa do zero com o tempo q ja esta rolando

        int minutes = t/60; // conta os minutos
        int seconds = t%60; // conta os segundos

        cout<<setfill('0')<<setw(2)<<minutes<<":"<<setw(2)<<seconds<<endl; // imprime o contador bonitinho

        imprimirMatriz(matriz, x, y); // imprime a matriz dnv

        int tecla;
        if(_kbhit()){
            tecla=getch();
            if(tecla != 27) animarJogador(matriz, x, y, bombx, bomby, bombaTimer, tecla);
            if(tecla == 27){ // ao apertar esc volta ao menu
                tempojogo = t;
                break;
            }
        }

        if(colisaoJogadorInimigo(x, y, ix, iy)){ // confere se o jogador bateu no inimigo
            system("cls");
            definirCor(15);
            cout<<"GAME OVER\n";
            cout<<"Tempo de jogo: "<<setfill('0')<<setw(2)<<minutes<<":"<<setw(2)<<seconds<<"\n"; // mostra o tempo gasto no jogo
            cout<<"Bombas gastas: "<<contbomba<<"\n"; // mostra numero de bombas gastas
            Sleep(3000);
            system("cls");
            tempojogo = t;
            break;
        }

        if(im[0]==1 && im[1]==1 && im[2]==1){ // se os 3 forem 1 quer dizer q todos os inimigos morreram ent é win
                system("cls");
                definirCor(15);
                cout<<"Parabens voce venceu!\n";
                cout<<"Tempo de jogo: "<<setfill('0')<<setw(2)<<minutes<<":"<<setw(2)<<seconds<<"\n";
                cout<<"Bombas gastas: "<<contbomba<<"\n";
                Sleep(3000);
                system("cls");
                tempojogo = t;
                break;
        }

        if(bombaTimer == 1){
            if(bombaMatandoPlayerInimigo( matriz,  x,  y ,  bombx,  bomby)){ //Puxa a funçao que se o inimigo estiver no raio da explosao exibe game over
                system("cls");
                definirCor(15);
                cout<<"GAME OVER\n";
                cout<<"Tempo de jogo: "<<setfill('0')<<setw(2)<<minutes<<":"<<setw(2)<<seconds<<"\n";
                cout<<"Bombas gastas: "<<contbomba<<"\n";
                Sleep(3000);
                system("cls");
                tempojogo = t;
                break;
            }
        }

        if(tempo != ti){
            ti = tempo; // Atualize ti com o tempo atual

            if(bombaTimer == 1){
                for(int i=0; i<I; i++){
                    if(bombaMatandoPlayerInimigo(matriz,  ix[i],  iy[i],  bombx,  bomby)) { //Diminue o numero de inimigos de acordo com a morte
                        im[i]=1;
                    }
                }
            }

            if(bombaTimer != 0){
                bombaTimer--;
                if(bombaTimer == 0){ // ao explodir a bomba coloca ela de volta no lugar dela e em seguida adicionar ao contador de bombas usadas
                    bombx=21;
                    bomby=21;
                    contbomba++;
                }
            }

            for(int i=0; i<I; i++){//Função utilizada para o movimentaçãio dos inimigos de formas aleatoria e automatiacas
                if(im[i]==0){
                    int movimentos = rand() % 3 + 1;
                    int teste = 0;

                    while(teste < movimentos){//indica quantos movimentos o inimigo já fez, e `movimentos` é uma variável que indica quantos movimentos o inimigo deve fazer
                        int inimigo = rand() % 4 + 1;
                        animarInimigos(matriz, ix[i], iy[i], inimigo, teste, bombaTimer);
                    }
                }
            }
        }
        ti = tempo;
    }
}

int main(){
    srand(time(NULL));

    fstream loadgame;
    fstream savegame;
    string emptyLine;

    const char* filename = "gamesave.txt";

    ifstream file(filename);

    int x = 1, y = 1; // escolhe em que posicao o personagem nasce
    int ix[I] = {1, 13, 13}, iy[I] = {13, 1, 13}; // escolhe em que posicao o inimigo nasce
    int im[I] = {0, 0, 0}; // contagem dos inimigos mortos
    int bombx = 21, bomby = 21, bombaTimer = 0, contbomba = 0;// representam as coordenadas da bomba no jogo, que começam em (15, 15). bombaTimer é um temporizador para controlar o tempo até a bomba explodir.
    int matriz[T][T];// representa o mapa do jogo. A matriz é de tamanho Tpor Te será usada para desenhar o cenário do jogo
    int matrizQuebraveis[T][T] = {0};// Ela é inicializada com zeros e será usada para representar as paredes que podem ser destruídas no jogo.
    int tempojogo = 0; // tempo do jogo em segundos
    int mapjogo; // pra randomizar o mapa
    int jogocorrendo = 0; // pra saber se ja tem um jogo em andamento

    int option;

    while(option != 6){
        definirCor(15);
        cout<<"MENU\n";
        cout<<"1 - Novo Jogo\n";
        cout<<"2 - Continuar\n";
        cout<<"3 - Carregar Jogo\n";
        cout<<"4 - Salvar Jogo\n";
        cout<<"5 - Sobre\n";
        cout<<"6 - Sair\n";
        cin>>option;

        switch(option){
            case 1:
                system("cls"); // inicia um jogo novo toda vez

                tempojogo = 0;

                x = 1;
                y = 1;
                bombx = 21;
                bomby = 21;
                bombaTimer = 0;

                for(int i=0; i<I; i++){
                    im[i] = 0;
                }

                mapjogo = rand() % 2 + 1; // randomiza os 2 mapas q tem

                if(!carregarMapa(mapjogo, ix, iy, matrizBase)) break;

                animacao(matriz, matrizQuebraveis, x, y, ix, iy, bombx, bomby, bombaTimer, im, tempojogo, contbomba);

                jogocorrendo = 1;

                system("cls");
                break;
            case 2:
                if(jogocorrendo==0){
                    system("cls");
                    cout<<"Nenhum jogo em andamento!\n"; // se n tiver nenhum jogo aberto ele volta ao menu
                    break;
                }
                system("cls");

                animacao(matriz, matrizQuebraveis, x, y, ix, iy, bombx, bomby, bombaTimer, im, tempojogo, contbomba); // continua o jogo sendo ele jogo novo ou jogo do save q vc carregou

                system("cls");
                break;
            case 3:
                system("cls");

                if (!file.is_open()){
                    cout <<"Arquivo nao encontrado. O jogo nao pode ser carregado.\n"; // se n tiver nenhum save de game ele volta ao menu
                    break;
                }

                loadgame.open("gamesave.txt", ios::in); // le o arquivo que foi salvo o jogo e em seguida inicia o game

                loadgame>>tempojogo;

                loadgame>>x>> y;

                for(int i=0; i<I; i++){
                    loadgame>>ix[i]>>iy[i];
                }

                loadgame>>bombx>>bomby>>bombaTimer>>contbomba;

                for(int l=0; l<T; l++){
                    for(int c=0; c<T; c++){
                        loadgame>>matrizBase[l][c];
                    }
                }

                loadgame.close();

                animacao(matriz, matrizQuebraveis, x, y, ix, iy, bombx, bomby, bombaTimer, im, tempojogo, contbomba);

                jogocorrendo = 1;

                system("cls");
                break;
            case 4:
                system("cls");
                savegame.open("gamesave.txt", ios::out); // salva o jogo em txt com essa seguinte ordem

                savegame<<tempojogo<<"\n";

                savegame<<x<<" "<<y<<"\n";

                for(int i=0; i<I; i++){
                    savegame<<ix[i]<<" "<<iy[i]<<"\n";
                }

                savegame<<bombx<<" "<<bomby<<" "<<bombaTimer<<" "<<contbomba<<"\n";

                for(int l=0; l<T; l++){
                    for(int c=0; c<T; c++){
                            savegame<<matrizBase[l][c]<<" ";
                    }
                    savegame<<"\n";
                }

                savegame.close();

                cout<<"Jogo salvo com sucesso!\n";
                break;
            case 5:
                system("cls");
                cout<<"Bomberman V2\n\n";
                cout<<"Realizado por:\n";
                cout<<"Matheus M. Testoni\n";
                cout<<"Sebastian Motta\n";
                cout<<"William Campos\n\n";
                cout<<"Algoritimos de Programacao\n\n";
                cout<<"10/2023\n";
                Sleep(5000);
                system("cls");
                break;
            case 6:
                system("cls");
                break;
        }
    }

    return 0;
}
